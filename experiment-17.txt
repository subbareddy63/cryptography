#include <stdio.h>
#include <stdint.h>


int initial_permutation_table[64] = { 
    58, 50, 42, 34, 26, 18, 10, 2,
    60, 52, 44, 36, 28, 20, 12, 4,
    62, 54, 46, 38, 30, 22, 14, 6,
    64, 56, 48, 40, 32, 24, 16, 8,
    57, 49, 41, 33, 25, 17, 9, 1,
    59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5,
    63, 55, 47, 39, 31, 23, 15, 7
};

int inverse_initial_permutation_table[64] = { 
    40, 8, 48, 16, 56, 24, 64, 32,
    39, 7, 47, 15, 55, 23, 63, 31,
    38, 6, 46, 14, 54, 22, 62, 30,
    37, 5, 45, 13, 53, 21, 61, 29,
    36, 4, 44, 12, 52, 20, 60, 28,
    35, 3, 43, 11, 51, 19, 59, 27,
    34, 2, 42, 10, 50, 18, 58, 26,
    33, 1, 41, 9, 49, 17, 57, 25
};

int expansion_table[48] = {
    32, 1, 2, 3, 4, 5, 4, 5,
    6, 7, 8, 9, 8, 9, 10, 11,
    12, 13, 12, 13, 14, 15, 16, 17,
    16, 17, 18, 19, 20, 21, 20, 21,
    22, 23, 24, 25, 24, 25, 26, 27,
    28, 29, 28, 29, 30, 31, 32, 1
};

int p_permutation_table[32] = {
    16, 7, 20, 21, 29, 12, 28, 17,
    1, 15, 23, 26, 5, 18, 31, 10,
    2, 8, 24, 14, 32, 27, 3, 9,
    19, 13, 30, 6, 22, 11, 4, 25
};

int shift_schedule[16] = {
    1, 1, 2, 2,
    2, 2, 2, 2,
    1, 2, 2, 2,
    2, 2, 2, 1
};

int s_boxes[8][4][16] = {
    {
        {14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7},
        {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8},
        {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0},
        {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}
    },
    {
        {15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10},
        {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5},
        {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15},
        {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}
    },
    {
        {10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8},
        {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1},
        {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7},
        {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}
    },
    {
        {7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15},
        {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9},
        {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4},
        {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}
    },
    {
        {2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9},
        {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6},
        {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14},
        {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}
    },
    {
        {12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11},
        {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8},
        {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6},
        {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}
    },
    {
        {4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1},
        {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6},
        {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2},
        {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}
    },
    {
        {13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7},
        {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2},
        {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8},
        {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}
    }
};

void initial_permutation(uint64_t *block) {
    uint64_t permuted_block = 0;
    int i;
    for (i = 0; i < 64; i++) {
        permuted_block |= ((*block >> (64 - initial_permutation_table[i])) & 1) << (63 - i);
    }
    *block = permuted_block;
}

void inverse_initial_permutation(uint64_t *block) {
    uint64_t permuted_block = 0;
    int i;
    for (i = 0; i < 64; i++) {
        permuted_block |= ((*block >> (64 - inverse_initial_permutation_table[i])) & 1) << (63 - i);
    }
    *block = permuted_block;
}

void expansion(uint32_t *right_half, uint64_t *expanded_half) {
    *expanded_half = 0;
    int i;
    for (i = 0; i < 48; i++) {
        *expanded_half |= ((*right_half >> (32 - expansion_table[i])) & 1) << (47 - i);
    }
}

void p_permutation(uint32_t *block) {
    uint32_t permuted_block = 0;
    int i;
    for (i = 0; i < 32; i++) {
        permuted_block |= ((*block >> (32 - p_permutation_table[i])) & 1) << (31 - i);
    }
    *block = permuted_block;
}

void generate_subkeys(uint64_t key, uint64_t subkeys[]) {
    initial_permutation(&key);
    uint32_t left_half = key >> 32;
    uint32_t right_half = key & 0xFFFFFFFF;
    uint32_t next_left_half, next_right_half;
    int i;
    for (i = 0; i < 16; i++) {
        int shift_amount = shift_schedule[i];
        next_left_half = left_half << shift_amount | left_half >> (28 - shift_amount);
        next_right_half = right_half << shift_amount | right_half >> (28 - shift_amount);
        uint64_t combined_half = ((uint64_t)next_left_half << 32) | next_right_half;
        uint64_t subkey = 0;
        int j;
        for (j = 0; j < 48; j++) {
            subkey |= ((combined_half >> (56 - p_permutation_table[j])) & 1) << (47 - j);
        }
        subkeys[i] = subkey;
        left_half = next_left_half;
        right_half = next_right_half;
    }
}

void des_decrypt(uint64_t *block, uint64_t subkeys[]) {
    initial_permutation(block);
    uint32_t left_half = *block >> 32;
    uint32_t right_half = *block & 0xFFFFFFFF;
    uint32_t next_left_half, next_right_half;
    int i;
    for (i = 15; i >= 0; i--) {
        uint64_t expanded_half;
        expansion(&right_half, &expanded_half);
        uint64_t xor_result = expanded_half ^ subkeys[i];
        uint32_t substituted_half = 0;
        int j;
        for (j = 0; j < 8; j++) {
            int row = ((xor_result >> (42 - 6 * j)) & 1) << 1 | ((xor_result >> (47 - 6 * j)) & 1);
            int col = ((xor_result >> (43 - 6 * j)) & 1) << 3 | ((xor_result >> (44 - 6 * j)) & 1) << 2 |
                      ((xor_result >> (45 - 6 * j)) & 1) << 1 | ((xor_result >> (46 - 6 * j)) & 1);
            substituted_half |= s_boxes[j][row][col] << (28 - 4 * j);
        }
        p_permutation(&substituted_half);
        next_left_half = right_half;
        next_right_half = left_half ^ substituted_half;
        left_half = next_left_half;
        right_half = next_right_half;
    }
    *block = ((uint64_t)left_half << 32) | right_half;
    inverse_initial_permutation(block);
}

int main() {
    uint64_t key = 0x133457799BBCDFF1;
    uint64_t plaintext = 0x0123456789ABCDEF;
    uint64_t ciphertext;
    uint64_t subkeys[16];
    
    generate_subkeys(key, subkeys);
    printf("Original Plaintext: 0x%016llx\n", plaintext);
    
    ciphertext = plaintext;
    des_decrypt(&ciphertext, subkeys);
    printf("Decrypted Plaintext: 0x%016llx\n", ciphertext);
    
    return 0;
}
